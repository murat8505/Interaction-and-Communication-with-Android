apply plugin: 'com.android.application'

android {
    compileSdkVersion 'android-MNC'
    buildToolsVersion "23.0.0 rc2"
    defaultConfig {
        applicationId "com.example.joeroger.homework2"
        minSdkVersion 'MNC'
        targetSdkVersion 'MNC'
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "APP_ID", '"Your weather api key here"'
    }
    // The signingConfigs section is optional. It is used to support commandline builds for
    // signing to avoid having to manually sign the apk.
    signingConfigs {
        release {
            // Dummy config so IDE doesn't complain, must be before build type
            // DO NOT STORE PASSWORDS HERE... See logic at end of file.
            keyAlias 'alias'
            keyPassword 'password'
            storeFile file('storeFile')
            storePassword 'password'
        }
    }
    buildTypes {
        release {
            // minify runs proguard, removes unused assests, etc
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        alpha {
            minifyEnabled false
            versionNameSuffix '.alpha'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '.debug'
            debuggable true
        }

    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile 'com.android.support:support-annotations:22.2.0'
    androidTestCompile 'com.android.support.test:runner:0.2'
    androidTestCompile 'com.android.support.test:rules:0.2'
    compile 'com.android.support:support-annotations:22.2.0'
    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:gridlayout-v7:22.2.0'
    compile 'com.android.support:design:22.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.google.android.gms:play-services-base:7.5.0'
    compile 'com.google.android.gms:play-services-location:7.5.0'
}

// This code below is optional. It is useful for command line builds only. If you sign in
// android studio it is unnecessary.
// Fetch password from user for signing release build
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':app:assembleRelease') ||
            taskGraph.hasTask(":app:assembleAlpha")) {

        def Properties props = new Properties()

        def fileName = "../../demo-keystore.properties"
        def propFile = file(fileName)

        if (propFile.canRead()) {
            props.load(new FileInputStream(propFile))

            if (props != null &&
                    props.containsKey('storeFile') &&
                    props.containsKey('storePassword') &&
                    props.containsKey('keyAlias') &&
                    props.containsKey('keyPassword')) {
                android.signingConfigs.release.storeFile = file(props['storeFile'])
                android.signingConfigs.release.storePassword = props['storePassword']
                android.signingConfigs.release.keyAlias = props['keyAlias']
                android.signingConfigs.release.keyPassword = props['keyPassword']
            } else {
                throw new IllegalStateException("${propFile.absolutePath} found but some entries are missing");
            }
        } else {
            throw new IllegalStateException("${propFile.absolutePath} not found");
        }
    } // end if has task
} // end whenReady
